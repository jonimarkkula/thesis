/*
 * accelerometer.c
 *
 *  Created on: 23.11.2017
 *  Author: Markkula
 */

#include "LPC11Uxx.h"                        /* LPC11Uxx definitions */
#include "accelerometer.h"
#include "type.h"


 /*Send data to the I2C Interface
 * Routine: Start, Transmit device address, Transmit Control byte (address),
 * Transmit Data (data), Stop
 * Parameters: Address where to write, data what to write
 * */
void sendData(unsigned int address, unsigned int data){

	unsigned int status = 0;

	//I2C START TRANSMIT
	LPC_I2C->CONSET |= (1<<5);             //set start bit to initiate transmission (datasheet 14.7.1)

	do{                                    //wait for start condition to be sent
	   	 /*store current state in status (datasheet 14.7.2)
	   	  *
	   	  *  When the status code is 0xF8,
	   	  *  there is no relevant information available and the SI bit is not set.
	   	  *  (SI bit is set when the I2C state changes, however, entering state F8
	   	  *  does not set the SI bit since there is nothing for an interrupt service
	   	  *  to do in that case. */
          status = LPC_I2C->STAT & 0xF8;
       }while(status != 0x08);                //compare current state with possible states (datasheet 14.10.1 table 287)

	/*Transmit device address (datasheet 14.7.3)*/
    /*Write address of sensor LMS6DSM when SA0 = 0*/
    LPC_I2C->DAT        = writeAddress;
	/*Clear STA and SI bit in CON register that controls operation of the I2C interface (datasheet 14.7.6) */
	LPC_I2C->CONCLR     = (1<<5); //STA
	LPC_I2C->CONCLR     = (1<<3); //SI

	//TRANSMIT CONTROL BYTE
	//while(LPC_I2C->STAT != 0x18);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	while(!(LPC_I2C->CONSET & (1<<3)));     //wait until SI (Interrupt Flag) is set to 0
	LPC_I2C->DAT        = address;         //send data (datasheet 14.7.3)
	LPC_I2C->CONCLR     = (1<<3);          //clear SI (datasheet 14.7.6)

	//TRANSMIT DATA BYTE
	//while(LPC_I2C->STAT != 0x28);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = data;            //send data (datasheet 14.7.3)
	LPC_I2C->CONCLR     = (1<<3);          //clear SI (datasheet 14.7.6)

	//INITIATE STOP CONDITION
	//while(LPC_I2C->STAT != 0x28);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	//while((LPC_I2C->CONSET & 0x8) != 0x8); //set STOP bit (sec 14.7.1)
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<5); 			//STA
	LPC_I2C->CONSET     = (1<<4);          //set stop bit (sec 14.7.1)
	LPC_I2C->CONCLR     = (1<<3);          //clear SIC (sec 14.7.6)

}


/*****************************************************************************
** Function name:		I2CInit
**
** Descriptions:		Initialize I2C controller
**
** parameters:			I2c mode is either MASTER or SLAVE
** Returned value:		true or false, return false if the I2C
**						interrupt handler was not installed correctly
**
*****************************************************************************/
void I2CInit( void )
{
			LPC_SYSCON->PRESETCTRL    |= (0x1<<1);
			LPC_SYSCON->PRESETCTRL    |= (0x2);    //disable reset to I2C unit (sec 3.5.2)

			LPC_SYSCON->SYSAHBCLKCTRL |= (1<<5);
			LPC_IOCON->PIO0_4 &= ~0x3F;	    //I2C I/O config
			LPC_IOCON->PIO0_4 |= 0x01;		//I2C SCL
			LPC_IOCON->PIO0_5 &= ~0x3F;
			LPC_IOCON->PIO0_5 |= 0x01;		//I2C SDA

			/*--- Clear flags ---*/
			LPC_I2C->CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;

			LPC_I2C->SCLL   = 0xF0;
			LPC_I2C->SCLH   = 0xF0;

			LPC_I2C->CONSET |= (1<<6);   //put I2C unit in master transmit mode (sec 15.8.1 and 15.7.1)

}


/*Function to delay the program for X amount of milliseconds*/
void _delay_ms (uint16_t ms)
{
	 uint16_t delay;
	 volatile uint32_t i;
	 for (delay = ms; delay >0 ; delay--)
	 //1ms loop
	  {
	  for (i=3500; i >0;i--){};
	  }
}


/*Function to read value from whoIAm register of the sensor*/
int whoIAm(int a){

	LPC_I2C->CONSET  = (1<<5);

	while(!(LPC_I2C->CONSET & (1<<3)));  	//Wait for interupt to be set
	LPC_I2C->DAT        = writeAddress;             //Device adress + W
	LPC_I2C->CONCLR		= (1<<5);			// Reset STA
	LPC_I2C->CONCLR     = (1<<3);			//Reset interupt

	//Transmit 1:st registry adress to start read from
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = 0x0F;	//ERI SENSORI
	//LPC_I2C->DAT	= 0X0D; Vanha sensori
	LPC_I2C->CONCLR     = (1<<3);

	//set start bit
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONSET     = (1<<5);
	LPC_I2C->CONCLR     = (1<<3);

	//adress + readbit with repeated start
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = readAddress;           //Device adress + R
	LPC_I2C->CONCLR     = (1<<3);

	//wait for last i2c operation to execute
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR		= (1<<5);
	LPC_I2C->CONCLR     = (1<<3);

	// Read Status
	while(!(LPC_I2C->CONSET & (1<<3)));
	a = LPC_I2C->DAT;
	LPC_I2C->CONCLR		= (1<<2);
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONSET     = (1<<4);          //set stop bit (sec 15.7.1)
	LPC_I2C->CONCLR     = (1<<5);		   //cleat STA
	LPC_I2C->CONCLR     = (1<<3);          //clear SIC (sec 15.7.6)

	return a;

}



/*Function to read x-Axis from the accelerometer*/
void xAxisAccelerometer(unsigned char *xAxisArray){

	/*Read X MSB*/
	LPC_I2C->CONSET       = (1<<5);

	while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
	LPC_I2C->DAT         = writeAddress; //Device address + W
	LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
	LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

	//Transmit 1:st registry address to start read from
	//while(LPC_I2C->STAT != 0x18);
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = OUTX_H_XL;
	LPC_I2C->CONCLR     = (1<<3);

	//start bit + accelerometer address + readbit
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->CONSET     = (1<<5);            //Set Startbit

	//Address + readbit with repeated start
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->DAT        = readAddress;       //Device address + R

	//wait for last i2c operation to execute
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	xAxisArray[0] = LPC_I2C->DAT;
	LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
	LPC_I2C->CONSET   = (1<<4);
	LPC_I2C->CONCLR   = (1<<3);


	/************************************************************************************************/
	/*READ X LSB*/

	LPC_I2C->CONSET       = (1<<5);

	while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
	LPC_I2C->DAT         = writeAddress; //Device address + W
	LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
	LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

	//Transmit 1:st registry address to start read from
	//while(LPC_I2C->STAT != 0x18);
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = OUTX_L_XL;
	LPC_I2C->CONCLR     = (1<<3);

	//start bit + accelerometer address + readbit
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->CONSET     = (1<<5);            //Set Startbit

	//Address + readbit with repeated start
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->DAT        = readAddress;       //Device address + R

	//wait for last i2c operation to execute
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	xAxisArray[1] = LPC_I2C->DAT;
	LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR   = (1<<5);   			//clear STA
	LPC_I2C->CONSET   = (1<<4);
	LPC_I2C->CONCLR   = (1<<3);

}


/*Function to read y-Axis from the accelerometer*/
void yAxisAccelerometer(unsigned char *yAxisArray){

		/*Read Y MSB*/
		LPC_I2C->CONSET       = (1<<5);

		while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
		LPC_I2C->DAT         = writeAddress; //Device address + W
		LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
		LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

		//Transmit 1:st registry address to start read from
		//while(LPC_I2C->STAT != 0x18);
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->DAT        = OUTY_H_XL;
		LPC_I2C->CONCLR     = (1<<3);

		//start bit + accelerometer address + readbit
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->CONSET     = (1<<5);            //Set Startbit

		//Address + readbit with repeated start
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->DAT        = readAddress;       //Device address + R

		//wait for last i2c operation to execute
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		yAxisArray[0] = LPC_I2C->DAT;
		LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
	    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
		LPC_I2C->CONSET   = (1<<4);
		LPC_I2C->CONCLR   = (1<<3);


		/************************************************************************************************/
		/*READ Y LSB*/

		LPC_I2C->CONSET       = (1<<5);

		while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
		LPC_I2C->DAT         = writeAddress; //Device address + W
		LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
		LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

		//Transmit 1:st registry address to start read from
		//while(LPC_I2C->STAT != 0x18);
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->DAT        = OUTY_L_XL;
		LPC_I2C->CONCLR     = (1<<3);

		//start bit + accelerometer address + readbit
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->CONSET     = (1<<5);            //Set Startbit

		//Address + readbit with repeated start
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->DAT        = readAddress;       //Device address + R

		//wait for last i2c operation to execute
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		yAxisArray[1] = LPC_I2C->DAT;
		LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR   = (1<<5);   			//clear STA
		LPC_I2C->CONSET   = (1<<4);
		LPC_I2C->CONCLR   = (1<<3);

}

/*Function to read z-Axis from the accelerometer*/
void zAxisAccelerometer(unsigned char *zAxisArray){

			/*Read Z MSB*/
			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTZ_H_XL;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			zAxisArray[0] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
		    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);


			/************************************************************************************************/
			/*READ Z LSB*/

			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTZ_L_XL;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			zAxisArray[1] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);

}




/*Function to read x-Axis from the Gyroscope*/
void xAxisGyroscope(unsigned char *xAxisArray){

		/*Read X MSB*/
		LPC_I2C->CONSET       = (1<<5);

		while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
		LPC_I2C->DAT         = writeAddress; //Device address + W
		LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
		LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

		//Transmit 1:st registry address to start read from
		//while(LPC_I2C->STAT != 0x18);
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->DAT        = OUTX_H_G;
		LPC_I2C->CONCLR     = (1<<3);

		//start bit + accelerometer address + readbit
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->CONSET     = (1<<5);            //Set Startbit

		//Address + readbit with repeated start
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->DAT        = readAddress;       //Device address + R

		//wait for last i2c operation to execute
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		xAxisArray[0] = LPC_I2C->DAT;
		LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
	    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
		LPC_I2C->CONSET   = (1<<4);
		LPC_I2C->CONCLR   = (1<<3);


		/************************************************************************************************/
		/*READ X LSB*/

		LPC_I2C->CONSET       = (1<<5);

		while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
		LPC_I2C->DAT         = writeAddress; //Device address + W
		LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
		LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

		//Transmit 1:st registry address to start read from
		//while(LPC_I2C->STAT != 0x18);
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->DAT        = OUTX_L_G;
		LPC_I2C->CONCLR     = (1<<3);

		//start bit + accelerometer address + readbit
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->CONSET     = (1<<5);            //Set Startbit

		//Address + readbit with repeated start
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<3);
		LPC_I2C->DAT        = readAddress;       //Device address + R

		//wait for last i2c operation to execute
		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		xAxisArray[1] = LPC_I2C->DAT;
		LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
		LPC_I2C->CONCLR     = (1<<3);

		while(!(LPC_I2C->CONSET & (1<<3)));
		LPC_I2C->CONCLR   = (1<<5);   			//clear STA
		LPC_I2C->CONSET   = (1<<4);
		LPC_I2C->CONCLR   = (1<<3);


}


/*Function to read y-Axis from the Gyroscope*/
void yAxisGyroscope(unsigned char *yAxisArray){


			/*Read Y MSB*/
			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTY_H_G;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			yAxisArray[0] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
		    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);


			/************************************************************************************************/
			/*READ Y LSB*/

			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTY_L_G;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			yAxisArray[1] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);




}


/*Function to read z-Axis from the Gyroscope*/
void zAxisGyroscope(unsigned char *zAxisArray){

			/*Read Z MSB*/
			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTZ_H_G;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			zAxisArray[0] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
		    LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);


			/************************************************************************************************/
			/*READ Z LSB*/

			LPC_I2C->CONSET       = (1<<5);

			while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
			LPC_I2C->DAT         = writeAddress; //Device address + W
			LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
			LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

			//Transmit 1:st registry address to start read from
			//while(LPC_I2C->STAT != 0x18);
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->DAT        = OUTZ_L_G;
			LPC_I2C->CONCLR     = (1<<3);

			//start bit + accelerometer address + readbit
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->CONSET     = (1<<5);            //Set Startbit

			//Address + readbit with repeated start
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<3);
			LPC_I2C->DAT        = readAddress;       //Device address + R

			//wait for last i2c operation to execute
			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			zAxisArray[1] = LPC_I2C->DAT;
			LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
			LPC_I2C->CONCLR     = (1<<3);

			while(!(LPC_I2C->CONSET & (1<<3)));
			LPC_I2C->CONCLR   = (1<<5);   			//clear STA
			LPC_I2C->CONSET   = (1<<4);
			LPC_I2C->CONCLR   = (1<<3);


}

unsigned char readStatusRegisterAcc(unsigned char accStatus){

	LPC_I2C->CONSET       = (1<<5);

	while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
	LPC_I2C->DAT         = writeAddress; //Device address + W
	LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
	LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

	//Transmit 1:st registry address to start read from
	//while(LPC_I2C->STAT != 0x18);
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = STATUS_REG;
	LPC_I2C->CONCLR     = (1<<3);

	//start bit + accelerometer address + readbit
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->CONSET     = (1<<5);            //Set Startbit

	//Address + readbit with repeated start
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->DAT        = readAddress;       //Device address + R

	//wait for last i2c operation to execute
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));

	if(LPC_I2C->DAT & (1<<0)){
		accStatus = 1;
	}
	else{
		accStatus = 0;
	}
	LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR   = (1<<5);   			//clear STA
	LPC_I2C->CONSET   = (1<<4);
	LPC_I2C->CONCLR   = (1<<3);

	return accStatus;
}


unsigned char readStatusRegisterGyro(unsigned char gyroStatus){

	LPC_I2C->CONSET       = (1<<5);

	while(!(LPC_I2C->CONSET & (1<<3)));  //Wait for interrupt to be set
	LPC_I2C->DAT         = writeAddress; //Device address + W
	LPC_I2C->CONCLR     = (1<<5); 		 // Reset STA
	LPC_I2C->CONCLR     = (1<<3); 		 //Reset interrupt

	//Transmit 1:st registry address to start read from
	//while(LPC_I2C->STAT != 0x18);
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->DAT        = STATUS_REG;
	LPC_I2C->CONCLR     = (1<<3);

	//start bit + accelerometer address + readbit
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->CONSET     = (1<<5);            //Set Startbit

	//Address + readbit with repeated start
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<3);
	LPC_I2C->DAT        = readAddress;       //Device address + R

	//wait for last i2c operation to execute
	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR     = (1<<5);          	 //Clear Startbit
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));

	if(LPC_I2C->DAT & (1<<1)){
		gyroStatus = 1;
	}
	else{
		gyroStatus = 0;
	}
	LPC_I2C->CONCLR 	 = (1<<2);          // ACK first byte
	LPC_I2C->CONCLR     = (1<<3);

	while(!(LPC_I2C->CONSET & (1<<3)));
	LPC_I2C->CONCLR   = (1<<5);   			//clear STA
	LPC_I2C->CONSET   = (1<<4);
	LPC_I2C->CONCLR   = (1<<3);

	return gyroStatus;
}

void correct_for_gravity(float *raw, float *acc)
{
   const float k = 0.9;
   static float gravity[3];

   gravity[0] = k * gravity[0] + (1 - k) * raw[0];
   gravity[1] = k * gravity[1] + (1 - k) * raw[1];
   gravity[2] = k * gravity[2] + (1 - k) * raw[2];

   acc[0] = raw[0] - gravity[0];
   acc[1] = raw[1] - gravity[1];
   acc[2] = raw[2] - gravity[2];
}

