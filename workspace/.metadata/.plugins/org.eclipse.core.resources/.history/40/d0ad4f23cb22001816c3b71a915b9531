/****************************************************************************
 *   $Id:: uarttest.c 4015 2010-07-28 22:28:05Z usb00423                    $
 *   Project: NXP LPC11Uxx UART example
 *
 *   Description:
 *     This file contains UART test modules, main entry, to test UART APIs.
*
****************************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.

* Permission to use, copy, modify, and distribute this software and its
* documentation is hereby granted, under NXP Semiconductors'
* relevant copyright in the software, without fee, provided that it
* is used in conjunction with NXP Semiconductors microcontrollers.  This
* copyright, permission, and disclaimer notice must appear in all copies of
* this code.

****************************************************************************/

#include "LPC11Uxx.h"
//#include "uart.h"


int main (void) {


SystemCoreClockUpdate();
  /* NVIC is installed inside UARTInit file. */
  UARTInit(38400);


  while (1)
  {
	/* Loop forever */
	UARTSend( (uint8_t *)"TEST", 4);
	_delay_ms(10);


	/*

	if ( UARTCount != 0 )
	{
	  LPC_USART->IER = IER_THRE | IER_RLS;			// Disable RBR //
	  UARTSend( (uint8_t *)UARTBuffer, UARTCount );
	  UARTCount = 0;
	  LPC_USART->IER = IER_THRE | IER_RLS | IER_RBR;	// Re-enable RBR //
	}

  */
  }

}


/*Function to delay the program for X amount of milliseconds*/
void _delay_ms (uint16_t ms)
{
	 uint16_t delay;
	 volatile uint32_t i;
	 for (delay = ms; delay >0 ; delay--)
	 //1ms loop
	  {
	  for (i=3500; i >0;i--){};
	  }
}




void UARTInit(uint32_t baudrate)
{

  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<16); /* Enable IOCON block */

  LPC_IOCON->PIO1_26 &= ~0x07;    /*  UART I/O config */
  LPC_IOCON->PIO1_26 |= 0x02;     /* UART RXD */
  LPC_IOCON->PIO1_26 &= ~0x07;
  LPC_IOCON->PIO1_26 |= 0x01;     /* UART TXD */

  /* Enable UART clock */
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
  LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */

  LPC_USART->LCR = 0x83;             /* 8 bits, no Parity, 1 Stop bit */
  regVal = LPC_SYSCON->UARTCLKDIV;
  Fdiv = ((SystemCoreClock/regVal)/16)/baudrate ;/*baud rate */

  LPC_USART->DLM = Fdiv / 256;
  LPC_USART->DLL = Fdiv % 256;
  LPC_USART->LCR = 0x03;/* DLAB = 0 */
  LPC_USART->FCR = 0x07;/* Enable and reset TX and RX FIFO. */

  /* Read to clear the line status. */
  regVal = LPC_USART->LSR;

  /* Ensure a clean start, no data in either TX or RX FIFO. */
  while (( LPC_USART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
  while ( LPC_USART->LSR & LSR_RDR )
  {
	  regVal = LPC_USART->RBR;/* Dump data from RX FIFO */
  }

}

void UARTSend(uint8_t *BufferPtr, uint32_t Length)
{

  //while ( !(LPC_USART->LSR & LSR_TEMT) );

  while ( Length != 0 )
  {
  while ( !(LPC_USART->LSR & LSR_THRE) );
  LPC_USART->THR = *BufferPtr;

      BufferPtr++;
      Length--;
  }
  return;
}
