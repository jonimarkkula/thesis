/*
 * accelerometer.c
 *
 *  Created on: 23.11.2017
 *      Author: Markkula
 */

#include "LPC11Uxx.h"                        /* LPC11Uxx definitions */
#include "accelerometer.h"
#include "type.h"

/*Send data to the I2C Interface
 * Routine: Start, Transmit device address, Transmit Control byte (address), Transmit Data (data), Stop
 * Parameters: Address where to write, data what to write
 * */
void sendData(unsigned int address, unsigned int data){

	unsigned int status = 0;

	         //I2C START TRANSMIT
	         LPC_I2C->CONSET |= (1<<5);             //set start bit to initiate transmission (datasheet 14.7.1)

	         do{                                    //wait for start condition to be sent
	        	 /*store current state in status (datasheet 14.7.2)
	        	  *
	        	  *  When the status code is 0xF8,
	        	  *  there is no relevant information available and the SI bit is not set.
	        	  *  (SI bit is set when the I2C state changes, however, entering state F8
	        	  *  does not set the SI bit since there is nothing for an interrupt service
	        	  *  to do in that case. */

	             status = LPC_I2C->STAT & 0xF8;
	         }while(status != 0x08);                //compare current state with possible states (datasheet 14.10.1 table 287)


	         /*Transmit device address (datasheet 14.7.3)
	          *Device address (0x1C) SA0 is 0, + W so 8-bit final value 0x38 */
	         LPC_I2C->DAT        = 0x38;
	         /*Clear STA and SI bit in CON register that controls operation of the I2C interface (datasheet 14.7.6) */
	         LPC_I2C->CONCLR     = (1<<5); //STA
	         LPC_I2C->CONCLR     = (1<<3); //SI


	         //TRANSMIT CONTROL BYTE
	         //while(LPC_I2C->STAT != 0x18);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	         while(!(LPC_I2C->CONSET & (1<<3)));     //wait until SI (Interrupt Flag) is set to 0
	         LPC_I2C->DAT        = address;         //send data (datasheet 14.7.3)
	         LPC_I2C->CONCLR     = (1<<3);          //clear SI (datasheet 14.7.6)

	         //TRANSMIT DATA BYTE
	         //while(LPC_I2C->STAT != 0x28);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	         while(!(LPC_I2C->CONSET & (1<<3)));
	         LPC_I2C->DAT        = data;            //send data (datasheet 14.7.3)
	         LPC_I2C->CONCLR     = (1<<3);          //clear SI (datasheet 14.7.6)

	         //INITIATE STOP CONDITION
	         //while(LPC_I2C->STAT != 0x28);          //wait for address byte to be sent (datasheet 14.10.1 table 287)
	         //while((LPC_I2C->CONSET & 0x8) != 0x8); //set STOP bit (sec 14.7.1)
	         while(!(LPC_I2C->CONSET & (1<<3)));
	         LPC_I2C->CONCLR     = (1<<5); 			//STA
	         LPC_I2C->CONSET     = (1<<4);          //set stop bit (sec 14.7.1)
	         LPC_I2C->CONCLR     = (1<<3);          //clear SIC (sec 14.7.6)

}





/*****************************************************************************
** Function name:		I2CInit
**
** Descriptions:		Initialize I2C controller
**
** parameters:			I2c mode is either MASTER or SLAVE
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
**
*****************************************************************************/
void I2CInit( void )
{


		LPC_SYSCON->PRESETCTRL    |= (0x1<<1);
		LPC_SYSCON->PRESETCTRL    |= (0x2);    //disable reset to I2C unit (sec 3.5.2)

		LPC_SYSCON->SYSAHBCLKCTRL |= (1<<5);
		LPC_IOCON->PIO0_4 &= ~0x3F;	    //I2C I/O config
		LPC_IOCON->PIO0_4 |= 0x01;		//I2C SCL
		LPC_IOCON->PIO0_5 &= ~0x3F;
		LPC_IOCON->PIO0_5 |= 0x01;		//I2C SDA

		/*--- Clear flags ---*/
		LPC_I2C->CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;

		LPC_I2C->SCLL   = 0xF0;
		LPC_I2C->SCLH   = 0xF0;

		LPC_I2C->CONSET |= (1<<6);   //put I2C unit in master transmit mode (sec 15.8.1 and 15.7.1)

/*
		 //INITIALIZE I2C pins, system components, and enable master transmit mode
	     LPC_IOCON->PIO0_4         &= ~(0x303); //clear "FUNC" and "I2CMODE" bits (sec 7.4.11)
	     LPC_IOCON->PIO0_4         |= 0x1;      //select I2C function SCL (sec 7.4.11)
	     LPC_IOCON->PIO0_5         &= ~(0x303); //clear "FUNC" and "I2CMODE" bits (sec 7.4.12)
	     LPC_IOCON->PIO0_5         |= 0x1;      //select I2C function SDA (sec 7.4.12)
	     LPC_SYSCON->SYSAHBCLKCTRL |= (1<<5);   //enable clock to I2C block (sec 3.5.14)
	     LPC_SYSCON->PRESETCTRL    |= (0x2);    //disable reset to I2C unit (sec 3.5.2)
	     LPC_I2C->CONSET           |= (1<<6);   //put I2C unit in master transmit mode (sec 15.8.1 and 15.7.1)
	     LPC_I2C->SCLH             = 0xFFF;     //set clk dividers (sec 15.7.5) set arbitrarily long
	     LPC_I2C->SCLL             = 0xFFF;     //set clk dividers (sec 15.7.5) set arbitrarily long
*/
}



void Calibrate(void){




}


void _delay_ms (uint16_t ms)
{
 uint16_t delay;
 volatile uint32_t i;
 for (delay = ms; delay >0 ; delay--)
//1ms loop with -Os optimisation
  {
  for (i=3500; i >0;i--){};
  }
}



/*
int whoIAm1(int a){

					LPC_I2C->CONSET  = (1<<5);

		        	while(!(LPC_I2C->CONSET & (1<<3)));  	//Wait for interupt to be set
		        	LPC_I2C->DAT        = 0x38;             //Device adress + W
		            LPC_I2C->CONCLR		= (1<<5);			// Reset STA
		            LPC_I2C->CONCLR     = (1<<3);			//Reset interupt

		            //Transmit 1:st registry adress to start read from
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->DAT        = 0x0D;
		            LPC_I2C->CONCLR     = (1<<3);

		            //set start bit
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->CONSET     = (1<<5);
		            LPC_I2C->CONCLR     = (1<<3);

		            //adress + readbit with repeated start
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->DAT        = 0x39;           //Device adress + R
		            LPC_I2C->CONCLR     = (1<<3);

		            //wait for last i2c operation to execute
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->CONCLR		= (1<<5);
		            LPC_I2C->CONCLR     = (1<<3);

		            // Read Status
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            a = LPC_I2C->DAT;					//BUG!! returns always DEC.57!!!
		            LPC_I2C->CONCLR		= (1<<2);
		            LPC_I2C->CONCLR     = (1<<3);

	       			while(!(LPC_I2C->CONSET & (1<<3)));
	   	            LPC_I2C->CONSET     = (1<<4);          //set stop bit (sec 15.7.1)
	   	            LPC_I2C->CONCLR     = (1<<5);		   //cleat STA
	   	            LPC_I2C->CONCLR     = (1<<3);          //clear SIC (sec 15.7.6)


	 return a;

}

*/


int whoIAm(int a){

					LPC_I2C->CONSET  = (1<<5);

		        	while(!(LPC_I2C->CONSET & (1<<3)));  	//Wait for interupt to be set
		        	LPC_I2C->DAT        = 0xD4;             //Device adress + W
		            LPC_I2C->CONCLR		= (1<<5);			// Reset STA
		            LPC_I2C->CONCLR     = (1<<3);			//Reset interupt

		            //Transmit 1:st registry adress to start read from
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->DAT        = 0x0F;
		            LPC_I2C->CONCLR     = (1<<3);

		            //set start bit
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->CONSET     = (1<<5);
		            LPC_I2C->CONCLR     = (1<<3);

		            //adress + readbit with repeated start
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->DAT        = 0xD5;           //Device adress + R
		            LPC_I2C->CONCLR     = (1<<3);

		            //wait for last i2c operation to execute
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            LPC_I2C->CONCLR		= (1<<5);
		            LPC_I2C->CONCLR     = (1<<3);

		            // Read Status
		            while(!(LPC_I2C->CONSET & (1<<3)));
		            a = LPC_I2C->DAT;					//BUG!! returns always DEC.57!!!
		            LPC_I2C->CONCLR		= (1<<2);
		            LPC_I2C->CONCLR     = (1<<3);

	       			while(!(LPC_I2C->CONSET & (1<<3)));
	   	            LPC_I2C->CONSET     = (1<<4);          //set stop bit (sec 15.7.1)
	   	            LPC_I2C->CONCLR     = (1<<5);		   //cleat STA
	   	            LPC_I2C->CONCLR     = (1<<3);          //clear SIC (sec 15.7.6)


	 return a;

}




void XYZread(unsigned char *array){

	LPC_I2C->CONSET       = (1<<5);

	            while(!(LPC_I2C->CONSET & (1<<3)));   //Wait for interupt to be set
	             LPC_I2C->DAT         = 0x38;             //Device adress + W
	             LPC_I2C->CONCLR     = (1<<5); // Reset STA
	             LPC_I2C->CONCLR     = (1<<3); //Reset interupt

	             //Transmit 1:st registry adress to start read from
	             //while(LPC_I2C->STAT != 0x18);
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             LPC_I2C->DAT        = 0x01;
	             LPC_I2C->CONCLR     = (1<<3);

	             //start bit + accelerometer adress + readbit
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             LPC_I2C->CONCLR     = (1<<3);
	             LPC_I2C->CONSET     = (1<<5);               //Set Startbit

	             //Adress + readbit with repeated start
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             LPC_I2C->DAT        = 0x39;           		//Device adress + R
	             LPC_I2C->CONCLR     = (1<<3);

	             //wait for last i2c operation to execute
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             LPC_I2C->CONCLR     = (1<<5);          	//Clear Startbit
	             LPC_I2C->CONCLR     = (1<<3);


	             // Read X MSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[0] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK first byte
	             LPC_I2C->CONCLR     = (1<<3);

	             // Read X LSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[1] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK second byte
	             LPC_I2C->CONCLR     = (1<<3);

	             // Read Y MSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[2] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK third byte
	             LPC_I2C->CONCLR     = (1<<3);

	             // Read Y LSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[3] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK fourth byte
	             LPC_I2C->CONCLR     = (1<<3);

	             // Read Z MSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[4] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK fifth byte
	             LPC_I2C->CONCLR     = (1<<3);

	             // Read Z LSB
	             while(!(LPC_I2C->CONSET & (1<<3)));
	             array[5] = LPC_I2C->DAT;
	             LPC_I2C->CONSET 	 = (1<<2);          // ACK sixth byte
	             LPC_I2C->CONCLR     = (1<<3);


	             while(!(LPC_I2C->CONSET & (1<<3)));
	               LPC_I2C->CONCLR   = (1<<5);   //cleat STA
	               LPC_I2C->CONSET   = (1<<4);
	               LPC_I2C->CONCLR   = (1<<3);

}


